using System;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace DHaven.Faux.Compiler
{
    public class HystrixCommandClassGenerator : IMethodClassGenerator
    {
        private readonly ILogger<HystrixCommandClassGenerator> logger;
        
        public CompilerConfig Config { get; }

        public HystrixCommandClassGenerator(IOptions<CompilerConfig> options,
            ILogger<HystrixCommandClassGenerator> logger)
        {
            Config = options.Value;
            this.logger = logger;
        }

        public string GenerateMethodClass(MethodInfo method, out string fullMethodClassName)
        {
            var typeInfo = method.DeclaringType;
            var className = typeInfo.FullName?.Replace(".", string.Empty);
            fullMethodClassName = $"{Config.RootNamespace}.{className}.{method.Name}";
            var sealedString = Config.GenerateSealedClasses ? "sealed" : string.Empty;
            var isAsyncCall = typeof(Task).IsAssignableFrom(method.ReturnType);
            var returnType = method.ReturnType;

            if(isAsyncCall && method.ReturnType.IsConstructedGenericType)
            {
                returnType = method.ReturnType.GetGenericArguments()[0];
            }

            var isVoid = returnType == typeof(void);
            var treturn = isVoid ? string.Empty : CompilerUtils.ToCompilableName(returnType);

            using (logger.BeginScope("Generator {0}.{1}:", className, method.Name))
            {
                var classBuilder = new StringBuilder();
                classBuilder.AppendLine($"namespace {Config.RootNamespace}.{className}");
                classBuilder.AppendLine("{");
                classBuilder.AppendLine("    // Generated by DHaven.Faux");
                classBuilder.AppendLine(
                    $"    public {sealedString} class {method.Name} : HystrixCommand");
                classBuilder.AppendLine("    {");
                classBuilder.AppendLine("    }");

                classBuilder.AppendLine("}");
                
                return classBuilder.ToString();
            }
        }
    }
}