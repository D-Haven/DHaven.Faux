using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace DHaven.Faux.Compiler
{
    public class HystrixCommandClassGenerator : IMethodClassGenerator
    {
        private readonly ILogger<HystrixCommandClassGenerator> logger;
        
        public CompilerConfig Config { get; }

        public HystrixCommandClassGenerator(IOptions<CompilerConfig> options,
            ILogger<HystrixCommandClassGenerator> logger)
        {
            Config = options.Value;
            this.logger = logger;
        }

        public string GenerateMethodClass(MethodInfo method, out string fullMethodClassName)
        {
            var typeInfo = method.DeclaringType;
            var className = $"{typeInfo.FullName?.Replace(".", string.Empty)}_{method.Name}";
            fullMethodClassName = $"{Config.RootNamespace}.{className}";
            var sealedString = Config.GenerateSealedClasses ? "sealed" : string.Empty;
            var isAsyncCall = typeof(Task).IsAssignableFrom(method.ReturnType);
            var returnType = method.ReturnType;
            var serviceName = typeInfo.GetCustomAttribute<FauxClientAttribute>().Name;

            if(isAsyncCall && method.ReturnType.IsConstructedGenericType)
            {
                returnType = method.ReturnType.GetGenericArguments()[0];
            }

            var isVoid = returnType == typeof(void);
            var treturn = isVoid ? string.Empty : $"<{CompilerUtils.ToCompilableName(returnType)}>";

            var inParams = method.GetParameters().Where(p => !p.IsOut).ToList();
            var outParams = method.GetParameters().Where(p => p.IsOut).ToList();

            using (logger.BeginScope("Generator {0}.{1}:", className, method.Name))
            using (var namespaceBuilder = new IndentBuilder())
            {
                namespaceBuilder.AppendLine($"namespace {Config.RootNamespace}");
                namespaceBuilder.AppendLine("{");
                using (var classBuilder = namespaceBuilder.Indent())
                {
                    classBuilder.AppendLine("// Generated by DHaven.Faux");
                    classBuilder.AppendLine($"public {sealedString} class {className} : HystrixCommand{treturn}");
                    classBuilder.AppendLine("{");
                    using (var fieldBuilder = classBuilder.Indent())
                    {
                        fieldBuilder.AppendLine("private final DHaven.Faux.HttpSupport.DiscoveryAwareBase 仮core;");
                        fieldBuilder.AppendLine("private final Microsoft.Extensions.Logging.ILogger 仮logger;");
                        fieldBuilder.AppendLine($"private final {typeInfo.FullName} 仮fallback;");

                        foreach (var inField in inParams)
                        {
                            fieldBuilder.AppendLine($"private final {CompilerUtils.ToCompilableName(inField.ParameterType)} 仮{inField.Name};");
                        }
                    }

                    using (var constructorBuilder = classBuilder.Indent())
                    {
                        constructorBuilder.AppendLine($"public {className}(");
                        constructorBuilder.AppendLine("        DHaven.Faux.HttpSupport.DiscoveryAwareBase core,");
                        constructorBuilder.AppendLine($"        {typeInfo.FullName} fallback,");
                        foreach (var inparam in inParams)
                        {
                            constructorBuilder.AppendLine(
                                $"        {CompilerUtils.ToCompilableName(inparam.ParameterType)} {inparam.Name},");
                        }
                        constructorBuilder.AppendLine("        Microsoft.Extensions.Logging.ILogger logger)");
                        constructorBuilder.AppendLine($"    : base(new Steeltoe.CircuitBreaker.Hystrix.HystrixCommandOptions(Steeltoe.CircuitBreaker.Hystrix.HystrixCommandGroupKeyDefault.AsKey(\"{serviceName}\"), Steeltoe.CircuitBreaker.Hystrix.HystrixCommandKeyDefault.AsKey(\"{method.Name}\")),null,null,logger)");
                        constructorBuilder.AppendLine("{");
                        using (var insideBuilder = constructorBuilder.Indent())
                        {
                            insideBuilder.AppendLine("仮core = core;");
                            insideBuilder.AppendLine("仮logger = logger;");
                            insideBuilder.AppendLine("仮fallback = fallback;");
                            foreach (var inparam in inParams)
                            {
                                constructorBuilder.AppendLine($"仮{inparam.Name} = {inparam.Name};");
                            }
                        }
                        constructorBuilder.AppendLine("}");
                    }

                    using (var propertyBuilder = classBuilder.Indent())
                    {
                        foreach (var property in outParams)
                        {
                            propertyBuilder.AppendLine($"public {CompilerUtils.ToCompilableName(property.ParameterType)} {property.Name} {{ get; private set; }}");
                        }
                    }

                    classBuilder.AppendLine("}");
                }

                namespaceBuilder.AppendLine("}");
                
                return namespaceBuilder.ToString();
            }
        }
    }
}